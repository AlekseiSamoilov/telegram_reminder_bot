import logging
from datetime import datetime
from email.utils import parsedate_to_datetime
from mimetypes import inited
from wsgiref.util import application_uri

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

from config import BOT_TOKEN
from database import init_database, add_reminder, get_active_reminders, delete_reminder
from time_parser import parse_time, format_time

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üîî–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!\n\n'
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '‚ùì /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n'
        'üìù /remind - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n'
        'üìã /list - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n'
        '–ü—Ä–∏–º–µ—Ä—ã:\n'
        '‚Ä¢ /remind —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É\n'
        '‚Ä¢ /remind –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º'
    )

async def help_command(update:Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = '''
    üîî **–ë–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π - –°–ø—Ä–∞–≤–∫–∞**
    
    **–ö–æ–º–∞–Ω–¥—ã:**
    üìù `/remind <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç>` - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    üìã `/list` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è  
    üóë `/delete <–Ω–æ–º–µ—Ä>` - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É
    ‚ùì `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
    
    **–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:**
    ‚è∞ `—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç` - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    ‚è∞ `—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞` - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    ‚è∞ `—Å–µ–≥–æ–¥–Ω—è –≤ 18:00` - –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è
    ‚è∞ `–∑–∞–≤—Ç—Ä–∞ –≤ 09:30` - –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞  
    ‚è∞ `15:45` - –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–æ) –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
    ‚è∞ `2024-06-10 14:30` - —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    
    **–ü—Ä–∏–º–µ—Ä—ã:**
    - `/remind —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ`
    - `/remind –∑–∞–≤—Ç—Ä–∞ –≤ 08:00 –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞`
    - `/remind —Å–µ–≥–æ–¥–Ω—è –≤ 20:00 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º`
    - `/remind 2024-06-15 10:00 –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–≥–∞`
    '''

    await update.message.reply_text(help_text, parse_mode='Markdown')

async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args: #–ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        await update.message.reply_text(
            '‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!\n\n'
            '–ü—Ä–∏–º–µ—Ä: `/remind —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É`',
            parse_mode='Markdown'
        )
        return
    #–û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
    full_text = ' '.join(context.args)

    words = full_text.split()
    reminder_time = None
    reminder_text = ''

    for i in range(2, min(7, len(words) + 1)):
        time_part = ' '.join(words[:i])
        text_part = ' '.join(words[i:])

        parsed_time = parse_time(time_part)

        if parsed_time and text_part:
            reminder_time = parsed_time
            reminder_text = text_part
            break

    if not reminder_time or not reminder_text:
        await update.message.reply_text(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!\n\n'
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n'
            '‚Ä¢ `/remind —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`\n'
            '‚Ä¢ `/remind –∑–∞–≤—Ç—Ä–∞ –≤ 15:00 —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`',
            parse_mode='Markdown'
        )
        return
    # –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º–º–∞
    user_id = update.effective_user.id

    try:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ë–î
        reminder_id = add_reminder(user_id, reminder_text, reminder_time)
        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        formatted_time = format_time(reminder_time)

        await update.message.reply_text(
            f'‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n'
            f'üìù **–¢–µ–∫—Å—Ç:** {reminder_text}\n'
            f'‚è∞ **–í—Ä–µ–º—è:** {formatted_time}\n'
            f'üÜî **ID:** {reminder_id}',
            parse_mode='Markdown'
        )

    except Exception as e: #–ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        )

async def list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    try:
        reminders = get_active_reminders(user_id)

        if not reminders:
            await update.message.reply_text(
                'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n'
                '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ: `/remind —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç —Ç–µ–∫—Å—Ç`',
                parse_mode='Markdown'
            )
            return

        message_list = ['üìã **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n']

        for i, (reminder_id, text, reminder_time_str, created_at) in enumerate(reminders, 1):
#             –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
#             formatted_time = format_time(remind_time)
            remind_time = datetime.fromisoformat(reminder_time_str)
            formatted_time = format_time(remind_time)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
            message_list.append(
                f'{i}. üìù {text}\n'
                f'   ‚è∞ {formatted_time}\n'
                f'   üÜî ID: {reminder_id}\n'
            )

            message = '\n'.join(message_list)

            message += '\n\nüí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è: `/delete <ID>`'

            await update.message.reply_text(message, parse_mode='Markdown')

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.'
        )

async def delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            '‚ùå –£–∫–∞–∂–∏—Ç–µ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!\n\n'
            '–ü—Ä–∏–º–µ—Ä: `/delete 5`\n'
            '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID: `/list`',
            parse_mode='Markdown'
        )
        return
    try:
        reminder_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text(
            '‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!\n\n'
            '–ü—Ä–∏–º–µ—Ä: `/delete 5`',
            parse_mode='Markdown'
        )
        return

    user_id = update.effective_user.id

    try:
        success = delete_reminder(reminder_id, user_id)

        if success:
            await update.message.reply_text(
                f'‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É–¥–∞–ª–µ–Ω–æ!'
            )
        else:
            await update.message.reply_text(
                f'‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.'
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:{e}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.'
        )

def setup_handlers(app: Application):

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("remind", remind_command))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("delete", delete_command))

def main():

    init_database()

    app = Application.builder().token(BOT_TOKEN).job_queue(None).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("remind", remind_command))
    app.add_handler(CommandHandler("list", list_command))
    app.add_handler(CommandHandler("delete", delete_command))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /remind, /list, /delete")
    app.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
