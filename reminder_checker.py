import asyncio
import logging

from datetime import date
from pyexpat.errors import messages

from telegram import Bot
from telegram.error import TelegramError

from config import BOT_TOKEN
from database import get_pending_reminders, delete_reminder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
class ReminderChecker:

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–∫–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    def __init__(self, bot_token: str):

        self.bot = Bot(token=bot_token)
        self.is_running = False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    # user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º–º–µ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
    # text: –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞)
    # reminder_id: ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
    async def send_reminder(self, user_id: int, text: str, reminder_id: int):
        try:
            message = f"üîî **–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï!**\n\nüìù {text}"

            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='Markdown'
            )

            delete_reminder(reminder_id, user_id)

            logger.info(f"–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            if "bot blocked by the user" in str(e).lower():
                delete_reminder(reminder_id, user_id)
                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} —É–¥–∞–ª–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")

    async def check_pending_reminders(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ
            pending_reminders = get_pending_reminders()

            if pending_reminders:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                tasks = []
                for reminder_id, user_id, text, remind_time in pending_reminders:

                    task = self.send_reminder(user_id, text, reminder_id)
                    tasks.append(task)
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                await asyncio.gather(*tasks, return_exceptions=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    async def start_checking(self, interval: int = 60):

        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await self.check_pending_reminders()

                # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(interval)

            except KeyboardInterrupt:

                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                self.stop_checking()

            except Exception as e:

                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ {e}")
                await asyncio.sleep(interval)

    def stop_checking(self):
        self.is_running = False
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

async def main():
    checker = ReminderChecker(BOT_TOKEN)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        await checker.start_checking(interval=30)
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        checker.stop_checking()

if __name__ == '__main__':
    asyncio.run(main())





