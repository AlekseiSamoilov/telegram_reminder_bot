import asyncio
import signal
import logging
from typing import List
from telegram.ext import Application

from config import BOT_TOKEN
from main import setup_handlers
from reminder_checker import ReminderChecker
from database import init_database

# –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG  # üîç –í–∫–ª—é—á–∞–µ–º DEBUG —É—Ä–æ–≤–µ–Ω—å
)
logger = logging.getLogger(__name__)


class DebugBotManager:

    def __init__(self):
        self.app = None
        self.reminder_checker = None
        self.tasks: List[asyncio.Task] = []
        self.is_stopping = False

    async def setup_bot(self):
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")

        init_database()

        self.app = Application.builder().token(BOT_TOKEN).job_queue(None).build()

        setup_handlers(self.app)

        await self.app.initialize()
        await self.app.start()

        logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def setup_reminder_checker(self):
        logger.info("‚è∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–∫–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")

        self.reminder_checker = ReminderChecker(BOT_TOKEN)

        logger.info("‚úÖ –ß–µ–∫–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def debug_telegram_bot(self):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è Telegram –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–ê–ü–£–°–ö: Telegram polling...")
            await self.app.updater.start_polling(drop_pending_updates=True)
            logger.info("‚úÖ –ó–ê–í–ï–†–®–ï–ù–ò–ï: Telegram polling –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ Telegram –±–æ—Ç–µ: {e}")
            import traceback
            logger.error(f"–¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
            raise

    async def debug_reminder_checker(self):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —á–µ–∫–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            logger.info("üöÄ –ó–ê–ü–£–°–ö: –ß–µ–∫–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
            await self.reminder_checker.start_checking(interval=30)
            logger.info("‚úÖ –ó–ê–í–ï–†–®–ï–ù–ò–ï: –ß–µ–∫–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ —á–µ–∫–µ—Ä–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            import traceback
            logger.error(f"–¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
            raise

    async def start_services_debug(self):
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (DEBUG —Ä–µ–∂–∏–º)...")

        tasks = []

        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
        if self.app:
            logger.info("üì± –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è Telegram –±–æ—Ç–∞...")
            bot_task = asyncio.create_task(
                self.debug_telegram_bot(),
                name="telegram_bot_debug"
            )
            tasks.append(bot_task)
            logger.info("üì± –ó–∞–¥–∞—á–∞ Telegram –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞")

        # –ó–∞–ø—É—Å–∫ —á–µ–∫–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –æ—Ç–ª–∞–¥–∫–æ–π
        if self.reminder_checker:
            logger.info("‚è∞ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —á–µ–∫–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
            checker_task = asyncio.create_task(
                self.debug_reminder_checker(),
                name="reminder_checker_debug"
            )
            tasks.append(checker_task)
            logger.info("‚è∞ –ó–∞–¥–∞—á–∞ —á–µ–∫–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞")

        self.tasks = tasks
        logger.info(f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: {len(tasks)}")

        # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã —á—Ç–æ–±—ã –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏...")
        await asyncio.sleep(2)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á
        for i, task in enumerate(tasks):
            task_name = task.get_name()
            if task.done():
                logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ '{task_name}' —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                if task.exception():
                    logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ '{task_name}': {task.exception()}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ '{task_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è")
            else:
                logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' —Ä–∞–±–æ—Ç–∞–µ—Ç")

        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è...")

            # –í–º–µ—Å—Ç–æ gather –∏—Å–ø–æ–ª—å–∑—É–µ–º wait —Å timeout –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            done, pending = await asyncio.wait(
                tasks,
                timeout=10,  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
                return_when=asyncio.FIRST_COMPLETED  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            )

            logger.info(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞—á: {len(done)}, –û–∂–∏–¥–∞–µ—Ç: {len(pending)}")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            for task in done:
                task_name = task.get_name()
                if task.exception():
                    logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ '{task_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {task.exception()}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ '{task_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–∫–∏")

            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –æ—Ç–º–µ–Ω—è–µ–º –∏—Ö
            for task in pending:
                logger.info(f"üõë –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏ '{task.get_name()}'")
                task.cancel()

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            import traceback
            logger.error(f"–¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
            raise

    async def stop_services(self):
        if self.is_stopping:
            logger.info("‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")
            return

        self.is_stopping = True
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")

        if self.reminder_checker:
            self.reminder_checker.stop_checking()
            logger.info("‚è∞ –ß–µ–∫–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self.tasks:
            if not task.done():
                task.cancel()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
        if self.app:
            try:
                if hasattr(self.app, 'updater') and self.app.updater and self.app.updater.running:
                    await self.app.updater.stop()
                    logger.info("üì± Updater –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

                await self.app.stop()
                await self.app.shutdown()
                logger.info("ü§ñ Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram –±–æ—Ç–∞: {e}")

        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")


async def main():
    bot_manager = None

    try:
        logger.info("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

        bot_manager = DebugBotManager()

        await bot_manager.setup_bot()
        await bot_manager.setup_reminder_checker()

        logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        logger.info("üîç –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")

        await bot_manager.start_services_debug()

    except KeyboardInterrupt:
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"–ü–æ–ª–Ω—ã–π —Ç—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
    finally:
        if bot_manager:
            await bot_manager.stop_services()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")