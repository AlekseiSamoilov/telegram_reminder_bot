import asyncio
import signal
import logging
from typing import List
from telegram.ext import Application

from config import BOT_TOKEN
from main import setup_handlers
from reminder_checker import ReminderChecker
from database import init_database

logging.basicConfig(
    format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BotManager:

    def __init__(self):
        self.app = None
        self.reminder_checker = None
        self.tasks: List[asyncio.Task] = []

    async def setup_bot(self):
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")

        init_database()

        self.app = Application.builder().token(BOT_TOKEN).job_queue(None).build()

        setup_handlers(self.app)

        await self.app.initialize()
        await self.app.start()

        logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def setup_reminder_checker(self):

        logger.info("‚è∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–∫–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")

        self.reminder_checker = ReminderChecker(BOT_TOKEN)

        logger.info("‚úÖ –ß–µ–∫–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def start_service(self):
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = []

        # –ó–∞–ø—É—Å–∫ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        if self.app:
            bot_task = asyncio.create_task(
                self.app.updater.start_polling(drop_pending_updates = True),
                name = "telegram_bot"
            )
            tasks.append(bot_task)
            logger.info("–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        # –ó–∞–ø—É—Å–∫ —á–µ–∫–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if self.reminder_checker:
            checker_task = asyncio.create_task(
                self.reminder_checker.start_checking(interval=30),
                name='reminder_checker'
            )
            tasks.append(checker_task)
            logger.info("–ß–µ–∫–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

        self.tasks = tasks

        try:
            await asyncio.gather(*tasks)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            raise

    async def stop_services(self):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤")

        if self.reminder_checker:
            await self.reminder_checker.start_checking()
            logger.info("–ß–µ–∫–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in self.tasks:
            if not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass #–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ

        if self.app:
            await self.app.stop()
            await self.app.shutdown()
            logger.info("–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        logger.info("–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

bot_manager = None

def signal_handler(signum, frame):

    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

    if bot_manager:

        loop = asyncio.get_event_loop()
        if loop.is_running():

            asyncio.create_task(bot_manager.stop_services())
        else:
            loop.run_until_complete(bot_manager.stop_services())

async def main():
    global bot_manager

    try:
        logger.info("üéØ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")

        bot_manager = BotManager()

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

        await bot_manager.setup_bot()
        await bot_manager.setup_reminder_checker()

        logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /remind, /list, /delete")
        logger.info("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")

        await bot_manager.start_service()

    except KeyboardInterrupt:
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if bot_manager:
            await bot_manager.stop_services()

if __name__ == '__main__':

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
